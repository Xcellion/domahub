{
  "_args": [
    [
      {
        "raw": "parse-domain@1.0.0",
        "scope": null,
        "escapedName": "parse-domain",
        "name": "parse-domain",
        "rawSpec": "1.0.0",
        "spec": "1.0.0",
        "type": "version"
      },
      "/home/qubuntu/Documents/domahub"
    ]
  ],
  "_from": "parse-domain@1.0.0",
  "_id": "parse-domain@1.0.0",
  "_inCache": true,
  "_location": "/parse-domain",
  "_nodeVersion": "6.4.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/parse-domain-1.0.0.tgz_1476452792711_0.26590853091329336"
  },
  "_npmUser": {
    "name": "peerigon",
    "email": "developers@peerigon.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "parse-domain@1.0.0",
    "scope": null,
    "escapedName": "parse-domain",
    "name": "parse-domain",
    "rawSpec": "1.0.0",
    "spec": "1.0.0",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/parse-domain/-/parse-domain-1.0.0.tgz",
  "_shasum": "0e7d9e1e86682185171af16d303848bb49dfba3e",
  "_shrinkwrap": null,
  "_spec": "parse-domain@1.0.0",
  "_where": "/home/qubuntu/Documents/domahub",
  "author": {
    "name": "peerigon",
    "email": "developers@peerigon.com"
  },
  "bugs": {
    "url": "https://github.com/peerigon/parse-domain/issues"
  },
  "dependencies": {},
  "description": "Splits an url into sub-domain, domain and effective top-level-domain",
  "devDependencies": {
    "chai": "^3.5.0",
    "eslint": "^3.7.1",
    "eslint-config-peerigon": "^6.0.0",
    "eslint-plugin-jsdoc": "^2.3.1",
    "mocha": "^3.1.2"
  },
  "directories": {},
  "dist": {
    "shasum": "0e7d9e1e86682185171af16d303848bb49dfba3e",
    "tarball": "https://registry.npmjs.org/parse-domain/-/parse-domain-1.0.0.tgz"
  },
  "gitHead": "ecd75393a712acb52a6cd61d9f603321e948c8ea",
  "homepage": "https://github.com/peerigon/parse-domain#readme",
  "keywords": [
    "domain",
    "url",
    "sub-domain",
    "tld",
    "parse",
    "extract",
    "sanitize",
    "country",
    "top-level"
  ],
  "license": "Unlicense",
  "main": "./lib/parseDomain.js",
  "maintainers": [
    {
      "name": "peerigon",
      "email": "developers@peerigon.com"
    }
  ],
  "name": "parse-domain",
  "optionalDependencies": {},
  "readme": "parse-domain\n============\n**Splits a URL into sub-domain, domain and the top-level domain.**\n\n[![](https://img.shields.io/npm/v/parse-domain.svg)](https://www.npmjs.com/package/parse-domain)\n[![](https://img.shields.io/npm/dm/parse-domain.svg)](https://www.npmjs.com/package/parse-domain)\n[![Dependency Status](https://david-dm.org/peerigon/parse-domain.svg)](https://david-dm.org/peerigon/parse-domain)\n[![Build Status](https://travis-ci.org/peerigon/parse-domain.svg?branch=master)](https://travis-ci.org/peerigon/parse-domain)\n[![Coverage Status](https://img.shields.io/coveralls/peerigon/parse-domain.svg)](https://coveralls.io/r/peerigon/parse-domain?branch=master)\n\nSince domains are handled differently across different countries and organizations, splitting a URL into sub-domain, domain and top-level-domain parts is not a simple regexp. **parse-domain** uses a [large list of known top-level domains](https://publicsuffix.org/list/public_suffix_list.dat) from publicsuffix.org to recognize different parts of the domain.\n\n<br />\n\nInstallation\n------------------------------------------------------------------------\n\n```sh\nnpm install --save parse-domain\n```\n\n<br />\n\nUsage\n------------------------------------------------------------------------\n\n```javascript\n// long subdomains can be handled\nexpect(parseDomain(\"some.subdomain.example.co.uk\")).to.eql({\n    subdomain: \"some.subdomain\",\n    domain: \"example\",\n    tld: \"co.uk\"\n});\n\n// protocols, usernames, passwords, ports, paths, queries and hashes are disregarded\nexpect(parseDomain(\"https://user:password@example.co.uk:8080/some/path?and&query#hash\")).to.eql({\n    subdomain: \"\",\n    domain: \"example\",\n    tld: \"co.uk\"\n});\n\n// unknown top-level domains are ignored\nexpect(parseDomain(\"unknown.tld.kk\")).to.equal(null);\n\n// invalid urls are also ignored\nexpect(parseDomain(\"invalid url\")).to.equal(null);\nexpect(parseDomain({})).to.equal(null);\n```\n\n### Introducing custom tlds\n\n```javascript\n// custom top-level domains can optionally be specified\nexpect(parseDomain(\"mymachine.local\",{ customTlds: [\"local\"] })).to.eql({\n    subdomain: \"\",\n    domain: \"mymachine\",\n    tld: \"local\"\n});\n\n// custom regexps can optionally be specified (instead of customTlds)\nexpect(parseDomain(\"localhost\",{ customTlds:/localhost|\\.local/ })).to.eql({\n    subdomain: \"\",\n    domain: \"\",\n    tld: \"localhost\"\n});\n```\n\nIt can sometimes be helpful to apply the customTlds argument using a helper function\n\n```javascript\nfunction parseLocalDomains(url) {\n    return parseDomain(url, {\n        customTlds: /localhost|\\.local/\n    });\n}\n\nexpect(parseLocalDomains(\"localhost\")).to.eql({\n    subdomain: \"\",\n    domain: \"\",\n    tld: \"localhost\"\n});\nexpect(parseLocalDomains(\"mymachine.local\")).to.eql({\n    subdomain: \"\",\n    domain: \"mymachine\",\n    tld: \"local\"\n});\n```\n\n<br />\n\nAPI\n------------------------------------------------------------------------\n\n### `parseDomain(url: string, options: ParseOptions): ParsedDomain|null`\n\nReturns `null` if `url` has an unknown tld or if it's not a valid url.\n\n#### `ParseOptions`\n\n```javascript\n{\n    // A list of custom tlds that are first matched against the url.\n    // Useful if you also need to split internal URLs like localhost.\n    customTlds: RegExp|Array<string>,\n    \n    // There are lot of private domains that act like top-level domains,\n    // like blogspot.com, googleapis.com or s3.amazonaws.com.\n    // By default, these domains would be split into:\n    // { subdomain: ..., domain: \"blogspot\", tld: \"com\" }\n    // When this flag is set to true, the domain will be split into\n    // { subdomain: ..., domain: ..., tld: \"blogspot.com\" }\n    // See also https://github.com/peerigon/parse-domain/issues/4\n    privateTlds: boolean\n}\n```\n\n#### `ParsedDomain`\n\n```javascript\n{\n    tld: string,\n    domain: string,\n    subdomain: string\n}\n```\n\n<br />\n\nLicense\n------------------------------------------------------------------------\n\nUnlicense\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/peerigon/parse-domain.git"
  },
  "scripts": {
    "build-regex": "node lib/build/buildRegex.js",
    "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha",
    "download-tld": "curl https://publicsuffix.org/list/public_suffix_list.dat > lib/build/tld.txt",
    "posttest": "eslint lib test",
    "test": "mocha -R spec",
    "update-regex": "npm run download-tld && npm run build-regex && npm run test"
  },
  "version": "1.0.0"
}
